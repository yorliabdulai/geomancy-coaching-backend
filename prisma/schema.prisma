// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int              @id @default(autoincrement())
  name                   String
  email                  String           @unique
  password               String
  role                   String           @default("free")
  subscription           Subscription?
  comments               Comment[]
  likes                  Like[]
  userAppointments       Appointment[]    @relation(name: "UserAppointments")
  expertAppointments     Appointment[]    @relation(name: "ExpertAppointments")
  orders                 Order[]
}

model Content {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  type        String
  authorId    Int
  isFree      Boolean
  comments    Comment[]
  likes       Like[]
}

model Appointment {
  id         Int       @id @default(autoincrement())
  userId     Int
  expertId   Int
  startTime  DateTime
  endTime    DateTime
  status     String
  price      Float
  user       User      @relation(fields: [userId], references: [id], name: "UserAppointments")
  expert     User      @relation(fields: [expertId], references: [id], name: "ExpertAppointments")
}

model Subscription {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  planId     Int
  startDate  DateTime
  endDate    DateTime
  user       User      @relation(fields: [userId], references: [id])
  plan       SubscriptionPlan @relation(fields: [planId], references: [id])
}

model SubscriptionPlan {
  id         Int       @id @default(autoincrement())
  name       String
  price      Float
  benefits   String[]
  subscriptions Subscription[]
}

model Order {
  id         Int       @id @default(autoincrement())
  userId     Int
  bookId     Int
  quantity   Int
  status     String
  paymentId  String
  user       User      @relation(fields: [userId], references: [id])
  book       Book      @relation(fields: [bookId], references: [id])
}

model Book {
  id         Int       @id @default(autoincrement())
  title      String
  author     String
  description String
  price      Float
  stock      Int
  orders     Order[]
}

model Comment {
  id         Int       @id @default(autoincrement())
  postId     Int
  authorId   Int
  comment    String
  user       User      @relation(fields: [authorId], references: [id])
  content    Content   @relation(fields: [postId], references: [id])
}

model Like {
  id         Int       @id @default(autoincrement())
  postId     Int
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  content    Content   @relation(fields: [postId], references: [id])
}
